#!/bin/bash

# 🚀 Deploy GitHub Actions Automation to Projects
# This script sets up comprehensive documentation automation for any project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKFLOW_DIR="$(dirname "$0")/templates"
GITHUB_TOKEN="${GITHUB_TOKEN:-}"

# Function to print colored output
print_color() {
    color=$1
    message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS] <project-path>

Deploy GitHub Actions automation workflows to a project.

OPTIONS:
    -a, --all           Deploy all workflows (default)
    -d, --docs          Deploy only documentation workflow
    -w, --wiki          Deploy only wiki sync workflow
    -p, --pages         Deploy only GitHub Pages workflow
    -P, --publish       Deploy only package publishing workflow
    -t, --token TOKEN   GitHub token for API operations
    -h, --help          Show this help message

EXAMPLES:
    # Deploy all workflows to a project
    $0 /path/to/project

    # Deploy only documentation workflows
    $0 --docs --wiki /path/to/project

    # Deploy with GitHub token for enabling features
    $0 --token ghp_xxxxx /path/to/project

EOF
    exit 0
}

# Parse arguments
WORKFLOWS=()
PROJECT_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -a|--all)
            WORKFLOWS=("all")
            shift
            ;;
        -d|--docs)
            WORKFLOWS+=("docs")
            shift
            ;;
        -w|--wiki)
            WORKFLOWS+=("wiki")
            shift
            ;;
        -p|--pages)
            WORKFLOWS+=("pages")
            shift
            ;;
        -P|--publish)
            WORKFLOWS+=("publish")
            shift
            ;;
        -t|--token)
            GITHUB_TOKEN="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            PROJECT_PATH="$1"
            shift
            ;;
    esac
done

# Validate project path
if [ -z "$PROJECT_PATH" ]; then
    print_color "$RED" "Error: Project path is required"
    usage
fi

if [ ! -d "$PROJECT_PATH" ]; then
    print_color "$RED" "Error: Project path does not exist: $PROJECT_PATH"
    exit 1
fi

# Default to all workflows if none specified
if [ ${#WORKFLOWS[@]} -eq 0 ] || [ "${WORKFLOWS[0]}" == "all" ]; then
    WORKFLOWS=("docs" "wiki" "pages" "publish")
fi

# Change to project directory
cd "$PROJECT_PATH"
PROJECT_NAME=$(basename "$PROJECT_PATH")

print_color "$BLUE" "🚀 Deploying GitHub Actions automation to: $PROJECT_NAME"
echo ""

# Check if it's a git repository
if [ ! -d ".git" ]; then
    print_color "$YELLOW" "⚠️  Not a git repository. Initializing..."
    git init
fi

# Create .github/workflows directory
mkdir -p .github/workflows

# Deploy selected workflows
for workflow in "${WORKFLOWS[@]}"; do
    case $workflow in
        docs)
            print_color "$GREEN" "📚 Deploying documentation automation..."
            cp "$WORKFLOW_DIR/auto-docs.yml" .github/workflows/
            ;;
        wiki)
            print_color "$GREEN" "📖 Deploying wiki sync..."
            cp "$WORKFLOW_DIR/wiki-sync.yml" .github/workflows/
            ;;
        pages)
            print_color "$GREEN" "🌐 Deploying GitHub Pages..."
            cp "$WORKFLOW_DIR/pages-deploy.yml" .github/workflows/
            ;;
        publish)
            print_color "$GREEN" "📦 Deploying package publishing..."
            cp "$WORKFLOW_DIR/package-publish.yml" .github/workflows/
            ;;
    esac
done

# Create workflow configuration file
print_color "$GREEN" "⚙️  Creating workflow configuration..."
cat > .github/workflows.config.yml << EOF
# GitHub Actions Automation Configuration
# Generated by deploy-automation.sh

workflows:
  documentation:
    enabled: true
    auto_generate_api_docs: true
    auto_update_readme: true
    auto_create_changelog: true
    
  wiki:
    enabled: true
    sync_frequency: "on_push"
    include_api_docs: true
    
  pages:
    enabled: true
    theme: "default"
    custom_domain: ""
    
  publishing:
    npm:
      enabled: $([ -f "package.json" ] && echo "true" || echo "false")
      access: "public"
    pypi:
      enabled: $([ -f "setup.py" ] || [ -f "pyproject.toml" ] && echo "true" || echo "false")
    docker:
      enabled: $([ -f "Dockerfile" ] && echo "true" || echo "false")
      registry: "ghcr.io"

quality_checks:
  require_license: true
  require_contributing: true
  require_code_of_conduct: true
  min_readme_sections:
    - "Installation"
    - "Usage"
    - "License"
EOF

# Create or update .gitignore
if [ ! -f ".gitignore" ]; then
    print_color "$GREEN" "📝 Creating .gitignore..."
    cat > .gitignore << EOF
# Dependencies
node_modules/
venv/
env/
*.egg-info/
dist/
build/

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Environment
.env
.env.local

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Testing
coverage/
.coverage
.pytest_cache/
*.cover

# Documentation
docs/_build/
site/
_site/
EOF
fi

# Get GitHub repository info
if git remote get-url origin &>/dev/null; then
    REPO_URL=$(git remote get-url origin)
    REPO_OWNER=$(echo "$REPO_URL" | sed -E 's/.*[:/]([^/]+)\/[^/]+\.git/\1/')
    REPO_NAME=$(echo "$REPO_URL" | sed -E 's/.*[:/][^/]+\/([^/]+)\.git/\1/')
    
    print_color "$BLUE" "📊 Repository: $REPO_OWNER/$REPO_NAME"
    
    # Enable GitHub features if token is provided
    if [ -n "$GITHUB_TOKEN" ]; then
        print_color "$GREEN" "🔧 Configuring GitHub repository features..."
        
        # Enable GitHub Pages
        if [[ " ${WORKFLOWS[@]} " =~ " pages " ]]; then
            print_color "$YELLOW" "  Enabling GitHub Pages..."
            curl -s -X PUT \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pages" \
                -d '{"source":{"branch":"gh-pages","path":"/"}}' &>/dev/null || true
        fi
        
        # Enable Wiki
        if [[ " ${WORKFLOWS[@]} " =~ " wiki " ]]; then
            print_color "$YELLOW" "  Enabling Wiki..."
            curl -s -X PATCH \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME" \
                -d '{"has_wiki":true}' &>/dev/null || true
        fi
        
        # Enable Issues (for discussions)
        print_color "$YELLOW" "  Enabling Issues..."
        curl -s -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME" \
            -d '{"has_issues":true}' &>/dev/null || true
    else
        print_color "$YELLOW" "⚠️  No GitHub token provided. Please manually enable:"
        echo "    - Wiki: Settings → Features → ✅ Wikis"
        echo "    - Pages: Settings → Pages → Source: GitHub Actions"
    fi
fi

# Create secrets configuration template
print_color "$GREEN" "🔐 Creating secrets template..."
cat > .github/secrets.example << EOF
# GitHub Secrets Configuration
# Copy this to your repository secrets

# Package Publishing
NPM_TOKEN=npm_xxxxxxxxxxxxx
PYPI_TOKEN=pypi-xxxxxxxxxxxxx
TEST_PYPI_TOKEN=pypi-test-xxxxxxxxxxxxx

# Optional: Custom domain for GitHub Pages
CNAME=docs.example.com
EOF

# Commit the changes
print_color "$GREEN" "💾 Committing automation setup..."
git add .github/
git commit -m "🤖 Add GitHub Actions automation workflows

- Documentation auto-generation
- Wiki synchronization  
- GitHub Pages deployment
- Package publishing automation" || true

# Summary
echo ""
print_color "$GREEN" "✅ Automation deployment complete!"
echo ""
print_color "$BLUE" "📋 Next Steps:"
echo ""
echo "1. Push to GitHub:"
echo "   git push origin main"
echo ""
echo "2. Configure repository settings:"
echo "   - Enable Wiki: Settings → Features → ✅ Wikis"
echo "   - Enable Pages: Settings → Pages → Source: GitHub Actions"
echo ""
echo "3. Add secrets (if publishing packages):"
echo "   - NPM_TOKEN: Settings → Secrets → New repository secret"
echo "   - PYPI_TOKEN: Settings → Secrets → New repository secret"
echo ""
echo "4. Create a release to trigger publishing:"
echo "   git tag v1.0.0"
echo "   git push origin v1.0.0"
echo ""
print_color "$GREEN" "🎉 Your project now has professional automation!"